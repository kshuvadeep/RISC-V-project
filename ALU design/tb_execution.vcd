$date
	Fri Aug  9 18:23:47 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_execution_unit $end
$var wire 1 ! Result_valid $end
$var wire 32 " Execution_Result [31:0] $end
$var reg 1 # clk $end
$var reg 32 $ data_src1 [31:0] $end
$var reg 32 % data_src2 [31:0] $end
$var reg 3 & funct3 [2:0] $end
$var reg 7 ' funct7 [6:0] $end
$var reg 21 ( immediate [20:0] $end
$var reg 7 ) instruction_type [6:0] $end
$var reg 1 * reset $end
$var reg 1 + system_stall $end
$scope module uut $end
$var wire 32 , Execution_Result [31:0] $end
$var wire 1 # clk $end
$var wire 32 - data_src1 [31:0] $end
$var wire 32 . data_src2 [31:0] $end
$var wire 3 / funct3 [2:0] $end
$var wire 7 0 funct7 [6:0] $end
$var wire 21 1 immediate [20:0] $end
$var wire 7 2 instruction_type [6:0] $end
$var wire 1 * reset $end
$var wire 1 3 result_valid_exe01 $end
$var wire 1 + system_stall $end
$var wire 1 4 uop_is_logic $end
$var wire 1 5 uop_is_add $end
$var wire 32 6 logical_value_exe01 [31:0] $end
$var wire 3 7 ctrl_logic [2:0] $end
$var wire 2 8 ctrl_adder [1:0] $end
$var wire 32 9 add_value_exe01 [31:0] $end
$var reg 32 : Execution_Result_exe01 [31:0] $end
$var reg 32 ; Execution_Result_exe02 [31:0] $end
$var reg 1 ! Result_valid $end
$scope module u_Adder_int $end
$var wire 32 < add_value [31:0] $end
$var wire 1 # clk $end
$var wire 21 = immediate [20:0] $end
$var wire 1 * reset $end
$var wire 32 > src1 [31:0] $end
$var wire 32 ? src2 [31:0] $end
$var wire 2 @ add_type [1:0] $end
$var reg 32 A add_value_reg [31:0] $end
$var reg 32 B adder_src1 [31:0] $end
$var reg 32 C adder_src2 [31:0] $end
$var reg 32 D src2_inp [31:0] $end
$upscope $end
$scope module u_Alu_ctrl $end
$var wire 1 # clk $end
$var wire 3 E funct3 [2:0] $end
$var wire 7 F funct7 [6:0] $end
$var wire 7 G instruction_type [6:0] $end
$var wire 1 * reset $end
$var reg 2 H ctrl_adder [1:0] $end
$var reg 3 I ctrl_logic [2:0] $end
$var reg 1 5 uop_is_add $end
$var reg 1 4 uop_is_logic $end
$upscope $end
$scope module u_logical_unit $end
$var wire 32 J And_result [31:0] $end
$var wire 32 K Or_result [31:0] $end
$var wire 32 L Xor_result [31:0] $end
$var wire 1 # clk $end
$var wire 21 M immediate [20:0] $end
$var wire 3 N logic_type [2:0] $end
$var wire 32 O logical_value [31:0] $end
$var wire 1 * reset $end
$var wire 32 P src1 [31:0] $end
$var wire 32 Q src2 [31:0] $end
$var wire 32 R logical_src2_inp [31:0] $end
$var reg 32 S logical_src1 [31:0] $end
$var reg 32 T logical_src2 [31:0] $end
$var reg 32 U logical_value_reg [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx U
bx T
bx S
b0 R
b0 Q
b0 P
bx O
bx N
b0 M
bx L
bx K
bx J
bx I
bx H
b0 G
b0 F
b0 E
bx D
bx C
bx B
bx A
bx @
b0 ?
b0 >
b0 =
bx <
b0 ;
b0 :
bx 9
bx 8
bx 7
bx 6
x5
x4
x3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
0+
1*
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
0#
b0 "
0!
$end
#10000
03
b0 L
b0 K
b0 J
04
05
b0 7
b0 I
b0 N
b0 8
b0 @
b0 H
b0 6
b0 O
b0 U
b0 T
b0 S
b0 9
b0 <
b0 A
b0 D
b0 C
b0 B
1#
#15000
b100000 R
b100000 %
b100000 .
b100000 ?
b100000 Q
b10000 $
b10000 -
b10000 >
b10000 P
b110011 )
b110011 2
b110011 G
0*
#20000
0#
#30000
b110000 L
b110000 K
b110000 :
13
b110000 9
b110000 <
b110000 A
b100000 C
b10000 B
b100000 D
b100000 T
b10000 S
b1 8
b1 @
b1 H
15
1#
#35000
b10000 R
b10000 %
b10000 .
b10000 ?
b10000 Q
b110000 $
b110000 -
b110000 >
b110000 P
b100000 '
b100000 0
b100000 F
#40000
0#
#50000
1!
b110000 "
b110000 ,
b110000 ;
b100000 L
b10000 J
b1000000 :
b10 8
b10 @
b10 H
b10000 T
b110000 S
b1000000 9
b1000000 <
b1000000 A
b10000 C
b110000 B
b10000 D
1#
#55000
b1111000011110000111100001111 R
b1111000011110000111100001111 %
b1111000011110000111100001111 .
b1111000011110000111100001111 ?
b1111000011110000111100001111 Q
b11111111111111111111111111110000 $
b11111111111111111111111111110000 -
b11111111111111111111111111110000 >
b11111111111111111111111111110000 P
b0 '
b0 0
b0 F
b111 &
b111 /
b111 E
#60000
0#
#70000
b1000000 "
b1000000 ,
b1000000 ;
b11110000111100001111000011111111 L
b11111111111111111111111111111111 K
b1111000011110000111100000000 J
b1111000011110000111100000000 6
b1111000011110000111100000000 O
b1111000011110000111100000000 U
b1111000011110000111100000000 :
b11111111111111111111111111110000 9
b11111111111111111111111111110000 <
b11111111111111111111111111110000 A
b0 C
b11111111111111111111111111110000 B
b0 D
b1111000011110000111100001111 T
b11111111111111111111111111110000 S
14
b11 7
b11 I
b11 N
b0 8
b0 @
b0 H
05
1#
#75000
b11110000111100001111000011110000 $
b11110000111100001111000011110000 -
b11110000111100001111000011110000 >
b11110000111100001111000011110000 P
b110 &
b110 /
b110 E
#80000
0#
#90000
b1111000011110000111100000000 "
b1111000011110000111100000000 ,
b1111000011110000111100000000 ;
b11111111111111111111111111111111 :
b11111111111111111111111111111111 6
b11111111111111111111111111111111 O
b11111111111111111111111111111111 U
b11111111111111111111111111111111 L
b0 J
b10 7
b10 I
b10 N
b11110000111100001111000011110000 S
b11110000111100001111000011110000 9
b11110000111100001111000011110000 <
b11110000111100001111000011110000 A
b11110000111100001111000011110000 B
1#
#95000
b1010101010101010101010101010101 R
b1010101010101010101010101010101 %
b1010101010101010101010101010101 .
b1010101010101010101010101010101 ?
b1010101010101010101010101010101 Q
b10101010101010101010101010101010 $
b10101010101010101010101010101010 -
b10101010101010101010101010101010 >
b10101010101010101010101010101010 P
b100 &
b100 /
b100 E
#100000
0#
#110000
b11111111111111111111111111111111 "
b11111111111111111111111111111111 ,
b11111111111111111111111111111111 ;
b10101010101010101010101010101010 9
b10101010101010101010101010101010 <
b10101010101010101010101010101010 A
b10101010101010101010101010101010 B
b1010101010101010101010101010101 T
b10101010101010101010101010101010 S
b1 7
b1 I
b1 N
1#
#115000
